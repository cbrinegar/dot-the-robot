
Cornelius Brinegar
Rilla Brinegar
2016-2017

--- ----------------------------------------------------------------------------
The overall idea is to make a robot according to Rilla's design.  The main
components are:
  * raspberry pi
  * Adafruit motor controller hat
  * wifi adapter
  * bluetooth adapter
  * usb web cam with microphone
  * 4 motors from a robot car kit
  * servos for head and arms
  * audio amp and speaker
  * character LCD
  * LED eyes
  * on/off buttons

The initial build was based on the 4 motor robot car with the raspberry pi and
Adafruit motor hat.  Two different control interfaces were implemented in 
python.  One creates a web interface, but it was slow and clunky.  One reads
keyboard presses (via a bluetooth keyboard) to make the robot move around.
The result was essentially a remote controlled car.  The main item was to 
download the Adafruit_MotorHAT python library and install it.

The body of the robot was then constructed.  The wheels and motors were 
attached to make it appear to be on roller skates.  The body was made of boxes
and paper mache.  It was painted pink and blue.  The head was mounted on a 
servo so that it can rotate.  The web cam can go on top of the head.

--- ----------------------------------------------------------------------------
Rilla wants the on/off buttons on the front, and she wants the character LCD
to be there also.

--- ----------------------------------------------------------------------------
We experimented with controlling the LED eyes via python.  It works, but we
had to figure out that the particular raspberry pi we are using requires
the BCM pin mapping.

import RPi.GPIO as GPIO
GPIO.setmode( GPIO.BCM )
GPIO.setup( 21, GPIO.OUT )

GPIO.output( 21, GPIO.HIGH )
GPIO.output( 21, GPIO.LOW )

--- ----------------------------------------------------------------------------
The web cam required some small changes to get it to work.

file:///home/cbrinegar/Downloads/raspberry_pi/Using%20a%20standard%20USB%20webcam%20-%20Raspberry%20Pi%20Documentation.html

sudo apt-get install fswebcam
fswebcam image.jpg

--- ----------------------------------------------------------------------------
It may be possible to perform face detection using OpenCV:

http://www.thisismyrobot.com/2010/04/face-detection-with-opencv-20-python-26.html

--- ----------------------------------------------------------------------------
The wifi adapter required the following changes.


--- ----------------------------------------------------------------------------
The bluetooth adapter required these changes.
  * still doesn't work yet

http://blog.davidvassallo.me/2014/05/11/android-linux-raspberry-pi-bluetooth-communication/

sudo apt-get install bluez python-bluez

sudo rfcomm bind 0 00:1A:7D:DA:71:13 1

set raspberry pi name:
sudo hciconfig hci0 name 'RobotPi'

make raspberry pi discoverable:
sudo hciconfig hci0 piscan

Create rfcomm device automatically

http://www.raspberry-projects.com/pi/pi-operating-systems/raspbian/bluetooth/serial-over-bluetooth

sudo sdptool add SP

edit bluetooth to run in compatibility mode

sudo vim /lib/systemd/system/bluetooth.service

[Unit]
Description=Bluetooth service
Documentation=man:bluetoothd(8)

[Service]
Type=dbus
BusName=org.bluez
ExecStart=/usr/lib/bluetooth/bluetoothd -C
NotifyAccess=main
#WatchdogSec=10
#Restart=on-failure
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
LimitNPROC=1

[Install]
WantedBy=bluetooth.target
Alias=dbus-org.bluez.service

--- ----------------------------------------------------------------------------
Ideas for adding a power button:

https://howchoo.com/g/mwnlytk3zmm/how-to-add-a-power-button-to-your-raspberry-pi

--- ----------------------------------------------------------------------------
Character LCD:

https://learn.adafruit.com/character-lcd-with-raspberry-pi-or-beaglebone-black/overview


--- ----------------------------------------------------------------------------Speech recognition:

pip install SpeechRecognition

https://aliceia.it/blog/2016/10/10/raspberry-pi-3-tts-stt/

--- ----------------------------------------------------------------------------
Robot OS (ROS):

http://wiki.ros.org/kinetic/Installation/Debian

It might be a good idea to move to this, but I'm not sure yet.

Speech

sudo raspi-config
forced audio out of headphone so that alsa utilities work

--- ----------------------------------------------------------------------------
pigpio for servo control to avoid messing with an Arduino

The pi should be plenty fast to create a 50 Hz pulsed waveform, and someone
created a library to do this on any GPIO.  It is supposed to work with 
Python also, so let's give it a try.

sudo apt-get install pigpio
sudo apt-get install python-pigpio

https://raspberrypi.stackexchange.com/questions/29480/how-to-use-pigpio-to-control-a-servo-motor-with-a-keyboard

sudo pigpiod

python

#import time
#import curses
#import atexit
import pigpio

SERVO = 18

MIN_PW = 1000 #600 closer
MID_PW = 1500
MAX_PW = 2000 #2500 closer

pi = pigpio.pi()

pi.set_servo_pulsewidth( SERVO, MID_PW )

Hooray!  This actually works and avoids the need to use an Arduino.  Though
I'm not opposed to Arduino as it could add many new features such as ADC
measurements, but an I2C ADC on the Pi would be handy there as well.

http://abyz.co.uk/rpi/pigpio/index.html

ADC:

http://rpi.science.uoit.ca/lab/adc/

--- ----------------------------------------------------------------------------
Next Steps

The wiring of the servo is up next.  The pigpio library will allow the use of
any pins to control servos.  Some other pins will be used for the buttons, and
still others for the LCD.  The LCD can be controlled over I2C also.

Voice

Have to run sudo raspi-config to force the audio out the headphone jack.

flite -voice slt -t "test"
./speak "some text"

espeak "good morning"
gives errors

>>> EOF

